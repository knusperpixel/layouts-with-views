{"name":"Layouts-with-views","tagline":"A simple layout and view rendering engine.","body":"Layouts with Views emulates Rails and other popular MVC framework . Your markup and content is stored in the `views/` folder and layouts reside in `views/layouts`, though both of these values can be changed in `config/config.php`.\r\n\r\nSince the rendering engine is PHP, you can utilize any control structures and operators you like.\r\n\r\n## Initial Setup\r\n\r\nBy default LwV expects to be installed in the root of whatever URL it is being accessed from. If the install directory is in the root (ie. www.domain.com/layout), set the `base_dir` configuration to 'layout/'.\r\n\r\n## Getting Started\r\n\r\n### Retrieving a View\r\nLet's say you want to reference an About page. Create `views/about.php`, navigation to `yourdomain.com/about`, and that view will be retrieved. The default view you see when visiting the root of LwS is `views/index.php`. This is customizable in `config/config.php`.\r\n\r\n### Setting a Layout\r\nThe default layout is `views/layouts/default.php` and can be changed in `config/config.php`. You can also override the default layout by setting `$this->layout('example')` in a view, where `example` will reference `views/layouts/example.php`.\r\n\r\n### Rendering Content\r\nThe main content of your view can be retrieved and displayed in the layout by calling `$this->getContent();`.\r\n\r\n### Rendering Assets\r\nAssets (images, javascript, stylesheets, etc) can be accessed by calling `$this->asset('images/example.jpg')` which then retrieves the given asset relative to the `assets` folder. And of course you can always add your own absolute or relative paths to the layouts, views, etc. For example:\r\n\r\n    <img src=\"<?php $this->asset('images/example.jpg'); ?>\">\r\n\r\n### Rendering Partials\r\nYou can render partials within views. Partials are stored in the `views/shared` and can be referenced from and saved in any view and layout. To render a view, use `$this->render('shared/file')`. All partials are referenced relative to the `views/` folder. You can also have unlimited nested folders, so `$this->render('shared/some/nested/partial');`\r\n\r\n### Passing Variables to Views and Layouts.\r\nYou can pass variables to nested views and a layout by assigning an array as a second parameter. For example `$this->render('shared/file', array('title' => 'New Page Title'))`, that view can now access the value of `title` in the sent array as `$title` in that nested view. The syntax for passing a variable to be used in a layout (which can be subsequently sent to another partial) `$this->layout('default', array('title' => 'New Page Title'))` (Set the first parameter to `false` to load the view without a layout).\r\n\r\n## Examples\r\n### Layout (views/layouts/default.php) Referencing 2 Partials\r\n    <html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <title>Example</title>\r\n    </head>\r\n    <body>\r\n\r\n        <header>\r\n            <?php $this->render('shared/header'); ?>\r\n        </header>\r\n\r\n        <div class=\"content\">\r\n            <?php $this->getContent(); ?>\r\n        </div>\r\n\r\n        <footer>\r\n            <?php $this->render('shared/footer'); ?>\r\n        </footer>\r\n\r\n    </body>\r\n    </html>\r\n\r\n### View (views/about.php) Referencing Custom Layout (views/layouts/custom.php)\r\n    <?php $this->layout('custom'); ?>\r\n\r\n    <h2>About Page</h2>\r\n\r\n    <p>Some page content here</p>\r\n\r\n\r\n### View (views/about.php) Passing `$page` to Default Layout\r\n    <?php $this->layout(false, array('page' => 'About'); ?>\r\n\r\n    <p>Some page content here</p>\r\n\r\n\r\n### View (views/about.php) Passing `$content` to Partial (views/shared/extra_content.php)\r\n    <h2>About Page</h2>\r\n\r\n    <p>Some page content here</p>\r\n\r\n    <?php $this->render('shared/extra_content', array('content' => 'Some custom contest here.')); ?>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}